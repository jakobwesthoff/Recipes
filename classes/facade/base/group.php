<?php
/**
 * arbit storage backend facade
 *
 * This file is part of arbit.
 *
 * arbit is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * arbit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with arbit; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @package Core
 * @subpackage Facade
 * @version $Revision: 1236 $
 * @license http://www.gnu.org/licenses/gpl-3.0.txt GPL
 */

/**
 * Group facade defining all methods required to access group related data in the
 * backend.
 *
 * @package Core
 * @subpackage Facade
 * @version $Revision: 1236 $
 * @license http://www.gnu.org/licenses/gpl-3.0.txt GPL
 */
interface arbitGroupFacade
{
    /**
     * Get array of groups
     *
     * Return an array with the IDs of all available groups in the database.
     *
     * @return array
     */
    public function getAllGroupIDs();

    /**
     * Get group data
     *
     * Get data for the given group name. The data should be returned as an
     * array, and should contain the following keys:
     *  - name
     *  - description
     *  - users
     *  - permissions
     *
     * Where users and permissions are arrays containg the list of users (their
     * login names) repectively the permission string keys.
     *
     * @param string $group
     * @return array
     */
    public function getGroupData( $group );

    /**
     * Create a new group
     *
     * Create a new group with the given name. An exception will be thrown if
     * there already is a group with the given name.
     *
     * The ID generated by the backend in some way is returned for later
     * reference. The type of the identifier depends on the backend, no
     * assumptions should be made here.
     *
     * @param string $name
     * @return mixed
     */
    public function createGroup( $name );

    /**
     * Update stored information for the given group
     *
     * The array with the information to update may any number of the common
     * keys, and only the given keys will be updated in the storage backend.
     *
     * @param string $group
     * @param array $data
     * @return void
     */
    public function updateGroupData( $group, $data );

    /**
     * Get privileges for user
     *
     * Get the privileges for a user, given the users ID, as an array of
     * strings defining the privileges the user has.
     *
     * @param string $user
     * @return array
     */
    public function getPrivilegesForUser( $user );
}

