<?php
/**
 * This file is part of recipe.
 *
 * recipe is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * recipe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with recipe; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @package Core
 * @subpackage Facade
 * @version $Revision: 1236 $
 * @license http://www.gnu.org/licenses/gpl-3.0.txt GPL
 */

namespace Recipes\Facade;

/**
 * User facade defining all methods required to access user related data in the
 * backend.
 *
 * @package Core
 * @subpackage Facade
 * @version $Revision: 1236 $
 * @license http://www.gnu.org/licenses/gpl-3.0.txt GPL
 */
interface User
{
    /**
     * Get array of users
     *
     * Return an array with the IDs of all available users in the database.
     *
     * @return array
     */
    public function getAllUserIDs();

    /**
     * Get user by login
     *
     * Get the user id for the user given by its login name.
     *
     * @param string $login
     * @return array
     */
    public function getUserDataByLogin( $login );

    /**
     * Get user data
     *
     * Get data for the given user id. The data should be returned as an array,
     * and should contain the following keys:
     *  - login
     *  - email
     *  - name
     *  - valid
     *  - auth_type
     *  - auth_infos
     *  - settings
     *  - persitenceToken
     *  - revisions
     *
     * @param string $user
     * @return array
     */
    public function getUserData( $user );

    /**
     * Create a new user
     *
     * Create a new user with the given name. An exception will be thrown if
     * there already is a user with the given name.
     *
     * The ID generated by the backend in some way is returned for later
     * reference. The type of the identifier depends on the backend, no
     * assumptions should be made here.
     *
     * @param string $name
     * @return mixed
     */
    public function createUser( $name );

    /**
     * Update stored information for the given user
     *
     * The array with the information to update may any number of the common
     * keys, and only the given keys will be updated in the storage backend.
     *
     * @param string $user
     * @param array $data
     * @return void
     */
    public function updateUserData( $user, $data );
}

